// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package final_project.dim_location_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: Dim_Location Purpose: <br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status
 */
public class Dim_Location implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

		// if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if (NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "Dim_Location";
	private final String projectName = "FINAL_PROJECT";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	public void setDataSourceReferences(List serviceReferences) throws Exception {

		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();

		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils
				.getServices(serviceReferences, javax.sql.DataSource.class).entrySet()) {
			dataSources.put(entry.getKey(), entry.getValue());
			talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					Dim_Location.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(Dim_Location.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tDBInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUniqRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_Production_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class StadtUniqueStruct implements routines.system.IPersistableRow<StadtUniqueStruct> {
		final static byte[] commonByteArrayLock_FINAL_PROJECT_Dim_Location = new byte[0];
		static byte[] commonByteArray_FINAL_PROJECT_Dim_Location = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer ID_Location;

		public Integer getID_Location() {
			return this.ID_Location;
		}

		public String Stadt;

		public String getStadt() {
			return this.Stadt;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ID_Location == null) ? 0 : this.ID_Location.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final StadtUniqueStruct other = (StadtUniqueStruct) obj;

			if (this.ID_Location == null) {
				if (other.ID_Location != null)
					return false;

			} else if (!this.ID_Location.equals(other.ID_Location))

				return false;

			return true;
		}

		public void copyDataTo(StadtUniqueStruct other) {

			other.ID_Location = this.ID_Location;
			other.Stadt = this.Stadt;

		}

		public void copyKeysDataTo(StadtUniqueStruct other) {

			other.ID_Location = this.ID_Location;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FINAL_PROJECT_Dim_Location.length) {
					if (length < 1024 && commonByteArray_FINAL_PROJECT_Dim_Location.length == 0) {
						commonByteArray_FINAL_PROJECT_Dim_Location = new byte[1024];
					} else {
						commonByteArray_FINAL_PROJECT_Dim_Location = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FINAL_PROJECT_Dim_Location, 0, length);
				strReturn = new String(commonByteArray_FINAL_PROJECT_Dim_Location, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FINAL_PROJECT_Dim_Location.length) {
					if (length < 1024 && commonByteArray_FINAL_PROJECT_Dim_Location.length == 0) {
						commonByteArray_FINAL_PROJECT_Dim_Location = new byte[1024];
					} else {
						commonByteArray_FINAL_PROJECT_Dim_Location = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_FINAL_PROJECT_Dim_Location, 0, length);
				strReturn = new String(commonByteArray_FINAL_PROJECT_Dim_Location, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FINAL_PROJECT_Dim_Location) {

				try {

					int length = 0;

					this.ID_Location = readInteger(dis);

					this.Stadt = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_FINAL_PROJECT_Dim_Location) {

				try {

					int length = 0;

					this.ID_Location = readInteger(dis);

					this.Stadt = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.ID_Location, dos);

				// String

				writeString(this.Stadt, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.ID_Location, dos);

				// String

				writeString(this.Stadt, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID_Location=" + String.valueOf(ID_Location));
			sb.append(",Stadt=" + Stadt);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(StadtUniqueStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID_Location, other.ID_Location);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class Dim_LocationStruct implements routines.system.IPersistableRow<Dim_LocationStruct> {
		final static byte[] commonByteArrayLock_FINAL_PROJECT_Dim_Location = new byte[0];
		static byte[] commonByteArray_FINAL_PROJECT_Dim_Location = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer ID_Location;

		public Integer getID_Location() {
			return this.ID_Location;
		}

		public String Stadt;

		public String getStadt() {
			return this.Stadt;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ID_Location == null) ? 0 : this.ID_Location.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final Dim_LocationStruct other = (Dim_LocationStruct) obj;

			if (this.ID_Location == null) {
				if (other.ID_Location != null)
					return false;

			} else if (!this.ID_Location.equals(other.ID_Location))

				return false;

			return true;
		}

		public void copyDataTo(Dim_LocationStruct other) {

			other.ID_Location = this.ID_Location;
			other.Stadt = this.Stadt;

		}

		public void copyKeysDataTo(Dim_LocationStruct other) {

			other.ID_Location = this.ID_Location;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FINAL_PROJECT_Dim_Location.length) {
					if (length < 1024 && commonByteArray_FINAL_PROJECT_Dim_Location.length == 0) {
						commonByteArray_FINAL_PROJECT_Dim_Location = new byte[1024];
					} else {
						commonByteArray_FINAL_PROJECT_Dim_Location = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FINAL_PROJECT_Dim_Location, 0, length);
				strReturn = new String(commonByteArray_FINAL_PROJECT_Dim_Location, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FINAL_PROJECT_Dim_Location.length) {
					if (length < 1024 && commonByteArray_FINAL_PROJECT_Dim_Location.length == 0) {
						commonByteArray_FINAL_PROJECT_Dim_Location = new byte[1024];
					} else {
						commonByteArray_FINAL_PROJECT_Dim_Location = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_FINAL_PROJECT_Dim_Location, 0, length);
				strReturn = new String(commonByteArray_FINAL_PROJECT_Dim_Location, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FINAL_PROJECT_Dim_Location) {

				try {

					int length = 0;

					this.ID_Location = readInteger(dis);

					this.Stadt = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_FINAL_PROJECT_Dim_Location) {

				try {

					int length = 0;

					this.ID_Location = readInteger(dis);

					this.Stadt = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.ID_Location, dos);

				// String

				writeString(this.Stadt, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.ID_Location, dos);

				// String

				writeString(this.Stadt, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID_Location=" + String.valueOf(ID_Location));
			sb.append(",Stadt=" + Stadt);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(Dim_LocationStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID_Location, other.ID_Location);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class FournisseurStruct implements routines.system.IPersistableRow<FournisseurStruct> {
		final static byte[] commonByteArrayLock_FINAL_PROJECT_Dim_Location = new byte[0];
		static byte[] commonByteArray_FINAL_PROJECT_Dim_Location = new byte[0];

		public java.util.Date BelegDat;

		public java.util.Date getBelegDat() {
			return this.BelegDat;
		}

		public String Material;

		public String getMaterial() {
			return this.Material;
		}

		public String Kurztext;

		public String getKurztext() {
			return this.Kurztext;
		}

		public Float Menge;

		public Float getMenge() {
			return this.Menge;
		}

		public String BME;

		public String getBME() {
			return this.BME;
		}

		public Integer Lieferwerk;

		public Integer getLieferwerk() {
			return this.Lieferwerk;
		}

		public String Lieferant;

		public String getLieferant() {
			return this.Lieferant;
		}

		public Double Nettopreis;

		public Double getNettopreis() {
			return this.Nettopreis;
		}

		public Double Nettowert;

		public Double getNettowert() {
			return this.Nettowert;
		}

		public Integer Warengrp;

		public Integer getWarengrp() {
			return this.Warengrp;
		}

		public String LOrt;

		public String getLOrt() {
			return this.LOrt;
		}

		public String Stadt;

		public String getStadt() {
			return this.Stadt;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FINAL_PROJECT_Dim_Location.length) {
					if (length < 1024 && commonByteArray_FINAL_PROJECT_Dim_Location.length == 0) {
						commonByteArray_FINAL_PROJECT_Dim_Location = new byte[1024];
					} else {
						commonByteArray_FINAL_PROJECT_Dim_Location = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FINAL_PROJECT_Dim_Location, 0, length);
				strReturn = new String(commonByteArray_FINAL_PROJECT_Dim_Location, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FINAL_PROJECT_Dim_Location.length) {
					if (length < 1024 && commonByteArray_FINAL_PROJECT_Dim_Location.length == 0) {
						commonByteArray_FINAL_PROJECT_Dim_Location = new byte[1024];
					} else {
						commonByteArray_FINAL_PROJECT_Dim_Location = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_FINAL_PROJECT_Dim_Location, 0, length);
				strReturn = new String(commonByteArray_FINAL_PROJECT_Dim_Location, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FINAL_PROJECT_Dim_Location) {

				try {

					int length = 0;

					this.BelegDat = readDate(dis);

					this.Material = readString(dis);

					this.Kurztext = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Menge = null;
					} else {
						this.Menge = dis.readFloat();
					}

					this.BME = readString(dis);

					this.Lieferwerk = readInteger(dis);

					this.Lieferant = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Nettopreis = null;
					} else {
						this.Nettopreis = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Nettowert = null;
					} else {
						this.Nettowert = dis.readDouble();
					}

					this.Warengrp = readInteger(dis);

					this.LOrt = readString(dis);

					this.Stadt = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_FINAL_PROJECT_Dim_Location) {

				try {

					int length = 0;

					this.BelegDat = readDate(dis);

					this.Material = readString(dis);

					this.Kurztext = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Menge = null;
					} else {
						this.Menge = dis.readFloat();
					}

					this.BME = readString(dis);

					this.Lieferwerk = readInteger(dis);

					this.Lieferant = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Nettopreis = null;
					} else {
						this.Nettopreis = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Nettowert = null;
					} else {
						this.Nettowert = dis.readDouble();
					}

					this.Warengrp = readInteger(dis);

					this.LOrt = readString(dis);

					this.Stadt = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.BelegDat, dos);

				// String

				writeString(this.Material, dos);

				// String

				writeString(this.Kurztext, dos);

				// Float

				if (this.Menge == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Menge);
				}

				// String

				writeString(this.BME, dos);

				// Integer

				writeInteger(this.Lieferwerk, dos);

				// String

				writeString(this.Lieferant, dos);

				// Double

				if (this.Nettopreis == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Nettopreis);
				}

				// Double

				if (this.Nettowert == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Nettowert);
				}

				// Integer

				writeInteger(this.Warengrp, dos);

				// String

				writeString(this.LOrt, dos);

				// String

				writeString(this.Stadt, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// java.util.Date

				writeDate(this.BelegDat, dos);

				// String

				writeString(this.Material, dos);

				// String

				writeString(this.Kurztext, dos);

				// Float

				if (this.Menge == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Menge);
				}

				// String

				writeString(this.BME, dos);

				// Integer

				writeInteger(this.Lieferwerk, dos);

				// String

				writeString(this.Lieferant, dos);

				// Double

				if (this.Nettopreis == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Nettopreis);
				}

				// Double

				if (this.Nettowert == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Nettowert);
				}

				// Integer

				writeInteger(this.Warengrp, dos);

				// String

				writeString(this.LOrt, dos);

				// String

				writeString(this.Stadt, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("BelegDat=" + String.valueOf(BelegDat));
			sb.append(",Material=" + Material);
			sb.append(",Kurztext=" + Kurztext);
			sb.append(",Menge=" + String.valueOf(Menge));
			sb.append(",BME=" + BME);
			sb.append(",Lieferwerk=" + String.valueOf(Lieferwerk));
			sb.append(",Lieferant=" + Lieferant);
			sb.append(",Nettopreis=" + String.valueOf(Nettopreis));
			sb.append(",Nettowert=" + String.valueOf(Nettowert));
			sb.append(",Warengrp=" + String.valueOf(Warengrp));
			sb.append(",LOrt=" + LOrt);
			sb.append(",Stadt=" + Stadt);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(FournisseurStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tDBInput_1Struct implements routines.system.IPersistableRow<after_tDBInput_1Struct> {
		final static byte[] commonByteArrayLock_FINAL_PROJECT_Dim_Location = new byte[0];
		static byte[] commonByteArray_FINAL_PROJECT_Dim_Location = new byte[0];

		public java.util.Date BelegDat;

		public java.util.Date getBelegDat() {
			return this.BelegDat;
		}

		public String Material;

		public String getMaterial() {
			return this.Material;
		}

		public String Kurztext;

		public String getKurztext() {
			return this.Kurztext;
		}

		public Float Menge;

		public Float getMenge() {
			return this.Menge;
		}

		public String BME;

		public String getBME() {
			return this.BME;
		}

		public Integer Lieferwerk;

		public Integer getLieferwerk() {
			return this.Lieferwerk;
		}

		public String Lieferant;

		public String getLieferant() {
			return this.Lieferant;
		}

		public Double Nettopreis;

		public Double getNettopreis() {
			return this.Nettopreis;
		}

		public Double Nettowert;

		public Double getNettowert() {
			return this.Nettowert;
		}

		public Integer Warengrp;

		public Integer getWarengrp() {
			return this.Warengrp;
		}

		public String LOrt;

		public String getLOrt() {
			return this.LOrt;
		}

		public String Stadt;

		public String getStadt() {
			return this.Stadt;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FINAL_PROJECT_Dim_Location.length) {
					if (length < 1024 && commonByteArray_FINAL_PROJECT_Dim_Location.length == 0) {
						commonByteArray_FINAL_PROJECT_Dim_Location = new byte[1024];
					} else {
						commonByteArray_FINAL_PROJECT_Dim_Location = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FINAL_PROJECT_Dim_Location, 0, length);
				strReturn = new String(commonByteArray_FINAL_PROJECT_Dim_Location, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FINAL_PROJECT_Dim_Location.length) {
					if (length < 1024 && commonByteArray_FINAL_PROJECT_Dim_Location.length == 0) {
						commonByteArray_FINAL_PROJECT_Dim_Location = new byte[1024];
					} else {
						commonByteArray_FINAL_PROJECT_Dim_Location = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_FINAL_PROJECT_Dim_Location, 0, length);
				strReturn = new String(commonByteArray_FINAL_PROJECT_Dim_Location, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FINAL_PROJECT_Dim_Location) {

				try {

					int length = 0;

					this.BelegDat = readDate(dis);

					this.Material = readString(dis);

					this.Kurztext = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Menge = null;
					} else {
						this.Menge = dis.readFloat();
					}

					this.BME = readString(dis);

					this.Lieferwerk = readInteger(dis);

					this.Lieferant = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Nettopreis = null;
					} else {
						this.Nettopreis = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Nettowert = null;
					} else {
						this.Nettowert = dis.readDouble();
					}

					this.Warengrp = readInteger(dis);

					this.LOrt = readString(dis);

					this.Stadt = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_FINAL_PROJECT_Dim_Location) {

				try {

					int length = 0;

					this.BelegDat = readDate(dis);

					this.Material = readString(dis);

					this.Kurztext = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Menge = null;
					} else {
						this.Menge = dis.readFloat();
					}

					this.BME = readString(dis);

					this.Lieferwerk = readInteger(dis);

					this.Lieferant = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Nettopreis = null;
					} else {
						this.Nettopreis = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Nettowert = null;
					} else {
						this.Nettowert = dis.readDouble();
					}

					this.Warengrp = readInteger(dis);

					this.LOrt = readString(dis);

					this.Stadt = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.BelegDat, dos);

				// String

				writeString(this.Material, dos);

				// String

				writeString(this.Kurztext, dos);

				// Float

				if (this.Menge == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Menge);
				}

				// String

				writeString(this.BME, dos);

				// Integer

				writeInteger(this.Lieferwerk, dos);

				// String

				writeString(this.Lieferant, dos);

				// Double

				if (this.Nettopreis == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Nettopreis);
				}

				// Double

				if (this.Nettowert == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Nettowert);
				}

				// Integer

				writeInteger(this.Warengrp, dos);

				// String

				writeString(this.LOrt, dos);

				// String

				writeString(this.Stadt, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// java.util.Date

				writeDate(this.BelegDat, dos);

				// String

				writeString(this.Material, dos);

				// String

				writeString(this.Kurztext, dos);

				// Float

				if (this.Menge == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Menge);
				}

				// String

				writeString(this.BME, dos);

				// Integer

				writeInteger(this.Lieferwerk, dos);

				// String

				writeString(this.Lieferant, dos);

				// Double

				if (this.Nettopreis == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Nettopreis);
				}

				// Double

				if (this.Nettowert == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Nettowert);
				}

				// Integer

				writeInteger(this.Warengrp, dos);

				// String

				writeString(this.LOrt, dos);

				// String

				writeString(this.Stadt, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("BelegDat=" + String.valueOf(BelegDat));
			sb.append(",Material=" + Material);
			sb.append(",Kurztext=" + Kurztext);
			sb.append(",Menge=" + String.valueOf(Menge));
			sb.append(",BME=" + BME);
			sb.append(",Lieferwerk=" + String.valueOf(Lieferwerk));
			sb.append(",Lieferant=" + Lieferant);
			sb.append(",Nettopreis=" + String.valueOf(Nettopreis));
			sb.append(",Nettowert=" + String.valueOf(Nettowert));
			sb.append(",Warengrp=" + String.valueOf(Warengrp));
			sb.append(",LOrt=" + LOrt);
			sb.append(",Stadt=" + Stadt);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tDBInput_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tDBInput_2Process(globalMap);

				FournisseurStruct Fournisseur = new FournisseurStruct();
				Dim_LocationStruct Dim_Location = new Dim_LocationStruct();
				StadtUniqueStruct StadtUnique = new StadtUniqueStruct();

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				currentComponent = "tDBOutput_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "StadtUnique");
				}

				int tos_count_tDBOutput_1 = 0;

				String dbschema_tDBOutput_1 = null;
				dbschema_tDBOutput_1 = "public";

				String tableName_tDBOutput_1 = null;
				if (dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
					tableName_tDBOutput_1 = ("Dim_Localisation");
				} else {
					tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\"" + ("Dim_Localisation");
				}

				int updateKeyCount_tDBOutput_1 = 1;
				if (updateKeyCount_tDBOutput_1 < 1) {
					throw new RuntimeException("For update, Schema must have a key");
				} else if (updateKeyCount_tDBOutput_1 == 2 && true) {
					throw new RuntimeException("For update, every Schema column can not be a key");
				}

				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;
				int nb_line_rejected_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;
				int rowsToCommitCount_tDBOutput_1 = 0;
				int rejectedCount_tDBOutput_1 = 0;

				boolean whetherReject_tDBOutput_1 = false;

				java.sql.Connection conn_tDBOutput_1 = null;
				String dbUser_tDBOutput_1 = null;

				java.lang.Class.forName("org.postgresql.Driver");

				String url_tDBOutput_1 = "jdbc:postgresql://" + "localhost" + ":" + "5432" + "/" + "DBdestination";
				dbUser_tDBOutput_1 = "postgres";

				final String decryptedPassword_tDBOutput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:HuG1y2iEIf2BolcQui9YahmhExKofTR/pt88ALQ5IU8=");

				String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;

				conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1, dbUser_tDBOutput_1,
						dbPwd_tDBOutput_1);

				resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
				conn_tDBOutput_1.setAutoCommit(false);
				int commitEvery_tDBOutput_1 = 10000;
				int commitCounter_tDBOutput_1 = 0;

				int batchSize_tDBOutput_1 = 10000;
				int batchSizeCounter_tDBOutput_1 = 0;

				int count_tDBOutput_1 = 0;
				java.sql.DatabaseMetaData dbMetaData_tDBOutput_1 = conn_tDBOutput_1.getMetaData();
				boolean whetherExist_tDBOutput_1 = false;
				try (java.sql.ResultSet rsTable_tDBOutput_1 = dbMetaData_tDBOutput_1.getTables(null, null, null,
						new String[] { "TABLE" })) {
					String defaultSchema_tDBOutput_1 = "public";
					if (dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
						try (java.sql.Statement stmtSchema_tDBOutput_1 = conn_tDBOutput_1.createStatement();
								java.sql.ResultSet rsSchema_tDBOutput_1 = stmtSchema_tDBOutput_1
										.executeQuery("select current_schema() ")) {
							while (rsSchema_tDBOutput_1.next()) {
								defaultSchema_tDBOutput_1 = rsSchema_tDBOutput_1.getString("current_schema");
							}
						}
					}
					while (rsTable_tDBOutput_1.next()) {
						String table_tDBOutput_1 = rsTable_tDBOutput_1.getString("TABLE_NAME");
						String schema_tDBOutput_1 = rsTable_tDBOutput_1.getString("TABLE_SCHEM");
						if (table_tDBOutput_1.equals(("Dim_Localisation"))
								&& (schema_tDBOutput_1.equals(dbschema_tDBOutput_1)
										|| ((dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0)
												&& defaultSchema_tDBOutput_1.equals(schema_tDBOutput_1)))) {
							whetherExist_tDBOutput_1 = true;
							break;
						}
					}
				}
				if (whetherExist_tDBOutput_1) {
					try (java.sql.Statement stmtDrop_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
						stmtDrop_tDBOutput_1.execute("DROP TABLE \"" + tableName_tDBOutput_1 + "\"");
					}
				}
				try (java.sql.Statement stmtCreate_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
					stmtCreate_tDBOutput_1.execute("CREATE TABLE \"" + tableName_tDBOutput_1
							+ "\"(\"ID_Location\" INT4 ,\"Stadt\" VARCHAR(100)  ,primary key(\"ID_Location\"))");
				}
				String update_tDBOutput_1 = "UPDATE \"" + tableName_tDBOutput_1
						+ "\" SET \"Stadt\" = ? WHERE \"ID_Location\" = ?";
				java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(update_tDBOutput_1);
				resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tUniqRow_1 begin ] start
				 */

				ok_Hash.put("tUniqRow_1", false);
				start_Hash.put("tUniqRow_1", System.currentTimeMillis());

				currentComponent = "tUniqRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "Dim_Location");
				}

				int tos_count_tUniqRow_1 = 0;

				class KeyStruct_tUniqRow_1 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String Stadt;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + ((this.Stadt == null) ? 0 : this.Stadt.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_1 other = (KeyStruct_tUniqRow_1) obj;

						if (this.Stadt == null) {
							if (other.Stadt != null)
								return false;

						} else if (!this.Stadt.equals(other.Stadt))

							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_1 = 0;
				int nb_duplicates_tUniqRow_1 = 0;
				KeyStruct_tUniqRow_1 finder_tUniqRow_1 = new KeyStruct_tUniqRow_1();
				java.util.Set<KeyStruct_tUniqRow_1> keystUniqRow_1 = new java.util.HashSet<KeyStruct_tUniqRow_1>();

				/**
				 * [tUniqRow_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "Fournisseur");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ProductionStruct> tHash_Lookup_Production = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ProductionStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ProductionStruct>) globalMap
						.get("tHash_Lookup_Production"));

				ProductionStruct ProductionHashKey = new ProductionStruct();
				ProductionStruct ProductionDefault = new ProductionStruct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				Dim_LocationStruct Dim_Location_tmp = new Dim_LocationStruct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tDBInput_1 begin ] start
				 */

				ok_Hash.put("tDBInput_1", false);
				start_Hash.put("tDBInput_1", System.currentTimeMillis());

				currentComponent = "tDBInput_1";

				int tos_count_tDBInput_1 = 0;

				int nb_line_tDBInput_1 = 0;
				java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "org.postgresql.Driver";
				java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = "postgres";

				final String decryptedPassword_tDBInput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:kv+p7ANgzkKWitpHjBWUQfKFg4oHFjRJxqXfFRjIO2g=");

				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;

				String url_tDBInput_1 = "jdbc:postgresql://" + "localhost" + ":" + "5432" + "/" + "DBsource";

				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1, dbUser_tDBInput_1,
						dbPwd_tDBInput_1);

				conn_tDBInput_1.setAutoCommit(false);

				java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

				String dbquery_tDBInput_1 = "SELECT \n  \"public\".\"SA_Fournisseur\".\"BelegDat\", \n  \"public\".\"SA_Fournisseur\".\"Material\", \n  \"public\".\"SA"
						+ "_Fournisseur\".\"Kurztext\", \n  \"public\".\"SA_Fournisseur\".\"Menge\", \n  \"public\".\"SA_Fournisseur\".\"BME\", \n  \""
						+ "public\".\"SA_Fournisseur\".\"Lieferwerk\", \n  \"public\".\"SA_Fournisseur\".\"Lieferant\", \n  \"public\".\"SA_Fournisse"
						+ "ur\".\"Nettopreis\", \n  \"public\".\"SA_Fournisseur\".\"Nettowert\", \n  \"public\".\"SA_Fournisseur\".\"Warengrp\", \n  "
						+ "\"public\".\"SA_Fournisseur\".\"LOrt\", \n  \"public\".\"SA_Fournisseur\".\"Stadt\"\nFROM \"public\".\"SA_Fournisseur\"";

				globalMap.put("tDBInput_1_QUERY", dbquery_tDBInput_1);
				java.sql.ResultSet rs_tDBInput_1 = null;

				try {
					rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
					java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
					int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

					String tmpContent_tDBInput_1 = null;

					while (rs_tDBInput_1.next()) {
						nb_line_tDBInput_1++;

						if (colQtyInRs_tDBInput_1 < 1) {
							Fournisseur.BelegDat = null;
						} else {

							Fournisseur.BelegDat = routines.system.JDBCUtil.getDate(rs_tDBInput_1, 1);
						}
						if (colQtyInRs_tDBInput_1 < 2) {
							Fournisseur.Material = null;
						} else {

							Fournisseur.Material = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, false);
						}
						if (colQtyInRs_tDBInput_1 < 3) {
							Fournisseur.Kurztext = null;
						} else {

							Fournisseur.Kurztext = routines.system.JDBCUtil.getString(rs_tDBInput_1, 3, false);
						}
						if (colQtyInRs_tDBInput_1 < 4) {
							Fournisseur.Menge = null;
						} else {

							Fournisseur.Menge = rs_tDBInput_1.getFloat(4);
							if (rs_tDBInput_1.wasNull()) {
								Fournisseur.Menge = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 5) {
							Fournisseur.BME = null;
						} else {

							Fournisseur.BME = routines.system.JDBCUtil.getString(rs_tDBInput_1, 5, false);
						}
						if (colQtyInRs_tDBInput_1 < 6) {
							Fournisseur.Lieferwerk = null;
						} else {

							Fournisseur.Lieferwerk = rs_tDBInput_1.getInt(6);
							if (rs_tDBInput_1.wasNull()) {
								Fournisseur.Lieferwerk = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 7) {
							Fournisseur.Lieferant = null;
						} else {

							Fournisseur.Lieferant = routines.system.JDBCUtil.getString(rs_tDBInput_1, 7, false);
						}
						if (colQtyInRs_tDBInput_1 < 8) {
							Fournisseur.Nettopreis = null;
						} else {

							Fournisseur.Nettopreis = rs_tDBInput_1.getDouble(8);
							if (rs_tDBInput_1.wasNull()) {
								Fournisseur.Nettopreis = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 9) {
							Fournisseur.Nettowert = null;
						} else {

							Fournisseur.Nettowert = rs_tDBInput_1.getDouble(9);
							if (rs_tDBInput_1.wasNull()) {
								Fournisseur.Nettowert = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 10) {
							Fournisseur.Warengrp = null;
						} else {

							Fournisseur.Warengrp = rs_tDBInput_1.getInt(10);
							if (rs_tDBInput_1.wasNull()) {
								Fournisseur.Warengrp = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 11) {
							Fournisseur.LOrt = null;
						} else {

							Fournisseur.LOrt = routines.system.JDBCUtil.getString(rs_tDBInput_1, 11, false);
						}
						if (colQtyInRs_tDBInput_1 < 12) {
							Fournisseur.Stadt = null;
						} else {

							Fournisseur.Stadt = routines.system.JDBCUtil.getString(rs_tDBInput_1, 12, false);
						}

						/**
						 * [tDBInput_1 begin ] stop
						 */

						/**
						 * [tDBInput_1 main ] start
						 */

						currentComponent = "tDBInput_1";

						tos_count_tDBInput_1++;

						/**
						 * [tDBInput_1 main ] stop
						 */

						/**
						 * [tDBInput_1 process_data_begin ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_begin ] stop
						 */

						/**
						 * [tMap_1 main ] start
						 */

						currentComponent = "tMap_1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "Fournisseur"

							);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_1 = false;
						boolean mainRowRejected_tMap_1 = false;

						///////////////////////////////////////////////
						// Starting Lookup Table "Production"
						///////////////////////////////////////////////

						boolean forceLoopProduction = false;

						ProductionStruct ProductionObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							ProductionHashKey.Stadt = Fournisseur.Stadt;

							ProductionHashKey.hashCodeDirty = true;

							tHash_Lookup_Production.lookup(ProductionHashKey);

						} // G_TM_M_020

						if (tHash_Lookup_Production != null
								&& tHash_Lookup_Production.getCount(ProductionHashKey) > 1) { // G 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
							// 'Production' and it contains more one result from keys : Production.Stadt =
							// '" + ProductionHashKey.Stadt + "'");
						} // G 071

						ProductionStruct Production = null;

						ProductionStruct fromLookup_Production = null;
						Production = ProductionDefault;

						if (tHash_Lookup_Production != null && tHash_Lookup_Production.hasNext()) { // G 099

							fromLookup_Production = tHash_Lookup_Production.next();

						} // G 099

						if (fromLookup_Production != null) {
							Production = fromLookup_Production;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
							// ###############################
							// # Output tables

							Dim_Location = null;

// # Output table : 'Dim_Location'
							Dim_Location_tmp.ID_Location = Numeric.sequence("s1", 1, 1);
							Dim_Location_tmp.Stadt = Fournisseur.Stadt;
							Dim_Location = Dim_Location_tmp;
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_1 = false;

						tos_count_tMap_1++;

						/**
						 * [tMap_1 main ] stop
						 */

						/**
						 * [tMap_1 process_data_begin ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_begin ] stop
						 */
// Start of branch "Dim_Location"
						if (Dim_Location != null) {

							/**
							 * [tUniqRow_1 main ] start
							 */

							currentComponent = "tUniqRow_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "Dim_Location"

								);
							}

							StadtUnique = null;
							if (Dim_Location.Stadt == null) {
								finder_tUniqRow_1.Stadt = null;
							} else {
								finder_tUniqRow_1.Stadt = Dim_Location.Stadt.toLowerCase();
							}
							finder_tUniqRow_1.hashCodeDirty = true;
							if (!keystUniqRow_1.contains(finder_tUniqRow_1)) {
								KeyStruct_tUniqRow_1 new_tUniqRow_1 = new KeyStruct_tUniqRow_1();

								if (Dim_Location.Stadt == null) {
									new_tUniqRow_1.Stadt = null;
								} else {
									new_tUniqRow_1.Stadt = Dim_Location.Stadt.toLowerCase();
								}

								keystUniqRow_1.add(new_tUniqRow_1);
								if (StadtUnique == null) {

									StadtUnique = new StadtUniqueStruct();
								}
								StadtUnique.ID_Location = Dim_Location.ID_Location;
								StadtUnique.Stadt = Dim_Location.Stadt;
								nb_uniques_tUniqRow_1++;
							} else {
								nb_duplicates_tUniqRow_1++;
							}

							tos_count_tUniqRow_1++;

							/**
							 * [tUniqRow_1 main ] stop
							 */

							/**
							 * [tUniqRow_1 process_data_begin ] start
							 */

							currentComponent = "tUniqRow_1";

							/**
							 * [tUniqRow_1 process_data_begin ] stop
							 */
// Start of branch "StadtUnique"
							if (StadtUnique != null) {

								/**
								 * [tDBOutput_1 main ] start
								 */

								currentComponent = "tDBOutput_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "StadtUnique"

									);
								}

								whetherReject_tDBOutput_1 = false;
								if (StadtUnique.Stadt == null) {
									pstmt_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(1, StadtUnique.Stadt);
								}

								if (StadtUnique.ID_Location == null) {
									pstmt_tDBOutput_1.setNull(2 + count_tDBOutput_1, java.sql.Types.INTEGER);
								} else {
									pstmt_tDBOutput_1.setInt(2 + count_tDBOutput_1, StadtUnique.ID_Location);
								}

								pstmt_tDBOutput_1.addBatch();
								nb_line_tDBOutput_1++;

								batchSizeCounter_tDBOutput_1++;

								if ((batchSize_tDBOutput_1 > 0)
										&& (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1)) {
									try {
										int countSum_tDBOutput_1 = 0;

										for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
											countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
													: countEach_tDBOutput_1);
										}
										rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;

										updatedCount_tDBOutput_1 += countSum_tDBOutput_1;

										batchSizeCounter_tDBOutput_1 = 0;
									} catch (java.sql.BatchUpdateException e_tDBOutput_1) {
										globalMap.put("tDBOutput_1_ERROR_MESSAGE", e_tDBOutput_1.getMessage());
										java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),
												sqle_tDBOutput_1 = null;
										String errormessage_tDBOutput_1;
										if (ne_tDBOutput_1 != null) {
											// build new exception to provide the original cause
											sqle_tDBOutput_1 = new java.sql.SQLException(
													e_tDBOutput_1.getMessage() + "\ncaused by: "
															+ ne_tDBOutput_1.getMessage(),
													ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(),
													ne_tDBOutput_1);
											errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
										} else {
											errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
										}

										int countSum_tDBOutput_1 = 0;
										for (int countEach_tDBOutput_1 : e_tDBOutput_1.getUpdateCounts()) {
											countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
													: countEach_tDBOutput_1);
										}
										rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;

										updatedCount_tDBOutput_1 += countSum_tDBOutput_1;

										System.err.println(errormessage_tDBOutput_1);

									}
								}

								commitCounter_tDBOutput_1++;
								if (commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {
									if ((batchSize_tDBOutput_1 > 0) && (batchSizeCounter_tDBOutput_1 > 0)) {
										try {
											int countSum_tDBOutput_1 = 0;

											for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
												countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
														: countEach_tDBOutput_1);
											}
											rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;

											updatedCount_tDBOutput_1 += countSum_tDBOutput_1;

											batchSizeCounter_tDBOutput_1 = 0;
										} catch (java.sql.BatchUpdateException e_tDBOutput_1) {
											globalMap.put("tDBOutput_1_ERROR_MESSAGE", e_tDBOutput_1.getMessage());
											java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),
													sqle_tDBOutput_1 = null;
											String errormessage_tDBOutput_1;
											if (ne_tDBOutput_1 != null) {
												// build new exception to provide the original cause
												sqle_tDBOutput_1 = new java.sql.SQLException(
														e_tDBOutput_1.getMessage() + "\ncaused by: "
																+ ne_tDBOutput_1.getMessage(),
														ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(),
														ne_tDBOutput_1);
												errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
											} else {
												errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
											}

											int countSum_tDBOutput_1 = 0;
											for (int countEach_tDBOutput_1 : e_tDBOutput_1.getUpdateCounts()) {
												countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
														: countEach_tDBOutput_1);
											}
											rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;

											updatedCount_tDBOutput_1 += countSum_tDBOutput_1;

											System.err.println(errormessage_tDBOutput_1);

										}
									}
									if (rowsToCommitCount_tDBOutput_1 != 0) {

									}
									conn_tDBOutput_1.commit();
									if (rowsToCommitCount_tDBOutput_1 != 0) {

										rowsToCommitCount_tDBOutput_1 = 0;
									}
									commitCounter_tDBOutput_1 = 0;
								}

								tos_count_tDBOutput_1++;

								/**
								 * [tDBOutput_1 main ] stop
								 */

								/**
								 * [tDBOutput_1 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_1";

								/**
								 * [tDBOutput_1 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_1 process_data_end ] start
								 */

								currentComponent = "tDBOutput_1";

								/**
								 * [tDBOutput_1 process_data_end ] stop
								 */

							} // End of branch "StadtUnique"

							/**
							 * [tUniqRow_1 process_data_end ] start
							 */

							currentComponent = "tUniqRow_1";

							/**
							 * [tUniqRow_1 process_data_end ] stop
							 */

						} // End of branch "Dim_Location"

						/**
						 * [tMap_1 process_data_end ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 process_data_end ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 end ] start
						 */

						currentComponent = "tDBInput_1";

					}
				} finally {
					if (rs_tDBInput_1 != null) {
						rs_tDBInput_1.close();
					}
					if (stmt_tDBInput_1 != null) {
						stmt_tDBInput_1.close();
					}
					if (conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {

						conn_tDBInput_1.commit();

						conn_tDBInput_1.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}
				globalMap.put("tDBInput_1_NB_LINE", nb_line_tDBInput_1);

				ok_Hash.put("tDBInput_1", true);
				end_Hash.put("tDBInput_1", System.currentTimeMillis());

				/**
				 * [tDBInput_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_Production != null) {
					tHash_Lookup_Production.endGet();
				}
				globalMap.remove("tHash_Lookup_Production");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "Fournisseur");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tUniqRow_1 end ] start
				 */

				currentComponent = "tUniqRow_1";

				globalMap.put("tUniqRow_1_NB_UNIQUES", nb_uniques_tUniqRow_1);
				globalMap.put("tUniqRow_1_NB_DUPLICATES", nb_duplicates_tUniqRow_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "Dim_Location");
				}

				ok_Hash.put("tUniqRow_1", true);
				end_Hash.put("tUniqRow_1", System.currentTimeMillis());

				/**
				 * [tUniqRow_1 end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					int countSum_tDBOutput_1 = 0;
					if (pstmt_tDBOutput_1 != null && batchSizeCounter_tDBOutput_1 > 0) {

						for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
						rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;

					}

					updatedCount_tDBOutput_1 += countSum_tDBOutput_1;

				} catch (java.sql.BatchUpdateException e_tDBOutput_1) {
					globalMap.put("tDBOutput_1_ERROR_MESSAGE", e_tDBOutput_1.getMessage());
					java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(), sqle_tDBOutput_1 = null;
					String errormessage_tDBOutput_1;
					if (ne_tDBOutput_1 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_1 = new java.sql.SQLException(
								e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(),
								ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
						errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
					} else {
						errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
					}

					int countSum_tDBOutput_1 = 0;
					for (int countEach_tDBOutput_1 : e_tDBOutput_1.getUpdateCounts()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
					rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;

					updatedCount_tDBOutput_1 += countSum_tDBOutput_1;

					System.err.println(errormessage_tDBOutput_1);

				}

				if (pstmt_tDBOutput_1 != null) {

					pstmt_tDBOutput_1.close();
					resourceMap.remove("pstmt_tDBOutput_1");
				}
				resourceMap.put("statementClosed_tDBOutput_1", true);
				if (rowsToCommitCount_tDBOutput_1 != 0) {

				}
				conn_tDBOutput_1.commit();
				if (rowsToCommitCount_tDBOutput_1 != 0) {

					rowsToCommitCount_tDBOutput_1 = 0;
				}
				commitCounter_tDBOutput_1 = 0;

				conn_tDBOutput_1.close();

				resourceMap.put("finish_tDBOutput_1", true);

				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1 + deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED", nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED", nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "StadtUnique");
				}

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				/**
				 * [tDBOutput_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_Production");

			try {

				/**
				 * [tDBInput_1 finally ] start
				 */

				currentComponent = "tDBInput_1";

				/**
				 * [tDBInput_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tUniqRow_1 finally ] start
				 */

				currentComponent = "tUniqRow_1";

				/**
				 * [tUniqRow_1 finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
						if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_1")) != null) {
							pstmtToClose_tDBOutput_1.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_1") == null) {
						java.sql.Connection ctn_tDBOutput_1 = null;
						if ((ctn_tDBOutput_1 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_1")) != null) {
							try {
								ctn_tDBOutput_1.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_1) {
								String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :"
										+ sqlEx_tDBOutput_1.getMessage();
								System.err.println(errorMessage_tDBOutput_1);
							}
						}
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}

	public static class ProductionStruct implements routines.system.IPersistableComparableLookupRow<ProductionStruct> {
		final static byte[] commonByteArrayLock_FINAL_PROJECT_Dim_Location = new byte[0];
		static byte[] commonByteArray_FINAL_PROJECT_Dim_Location = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String material;

		public String getMaterial() {
			return this.material;
		}

		public java.util.Date Belegdat;

		public java.util.Date getBelegdat() {
			return this.Belegdat;
		}

		public String kurztext;

		public String getKurztext() {
			return this.kurztext;
		}

		public Float Menge;

		public Float getMenge() {
			return this.Menge;
		}

		public Double Nettopreis;

		public Double getNettopreis() {
			return this.Nettopreis;
		}

		public Integer Lieferwerk;

		public Integer getLieferwerk() {
			return this.Lieferwerk;
		}

		public String Lieferant;

		public String getLieferant() {
			return this.Lieferant;
		}

		public String Stadt;

		public String getStadt() {
			return this.Stadt;
		}

		public Integer Warengrp;

		public Integer getWarengrp() {
			return this.Warengrp;
		}

		public String Lort;

		public String getLort() {
			return this.Lort;
		}

		public String Artikel_Zustand;

		public String getArtikel_Zustand() {
			return this.Artikel_Zustand;
		}

		public Double Nettowert;

		public Double getNettowert() {
			return this.Nettowert;
		}

		public Double Wert_bb;

		public Double getWert_bb() {
			return this.Wert_bb;
		}

		public Double Gesamtvbrwert;

		public Double getGesamtvbrwert() {
			return this.Gesamtvbrwert;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.Stadt == null) ? 0 : this.Stadt.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final ProductionStruct other = (ProductionStruct) obj;

			if (this.Stadt == null) {
				if (other.Stadt != null)
					return false;

			} else if (!this.Stadt.equals(other.Stadt))

				return false;

			return true;
		}

		public void copyDataTo(ProductionStruct other) {

			other.material = this.material;
			other.Belegdat = this.Belegdat;
			other.kurztext = this.kurztext;
			other.Menge = this.Menge;
			other.Nettopreis = this.Nettopreis;
			other.Lieferwerk = this.Lieferwerk;
			other.Lieferant = this.Lieferant;
			other.Stadt = this.Stadt;
			other.Warengrp = this.Warengrp;
			other.Lort = this.Lort;
			other.Artikel_Zustand = this.Artikel_Zustand;
			other.Nettowert = this.Nettowert;
			other.Wert_bb = this.Wert_bb;
			other.Gesamtvbrwert = this.Gesamtvbrwert;

		}

		public void copyKeysDataTo(ProductionStruct other) {

			other.Stadt = this.Stadt;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				unmarshaller.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller)
				throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller)
				throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = unmarshaller.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller)
				throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FINAL_PROJECT_Dim_Location.length) {
					if (length < 1024 && commonByteArray_FINAL_PROJECT_Dim_Location.length == 0) {
						commonByteArray_FINAL_PROJECT_Dim_Location = new byte[1024];
					} else {
						commonByteArray_FINAL_PROJECT_Dim_Location = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FINAL_PROJECT_Dim_Location, 0, length);
				strReturn = new String(commonByteArray_FINAL_PROJECT_Dim_Location, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FINAL_PROJECT_Dim_Location.length) {
					if (length < 1024 && commonByteArray_FINAL_PROJECT_Dim_Location.length == 0) {
						commonByteArray_FINAL_PROJECT_Dim_Location = new byte[1024];
					} else {
						commonByteArray_FINAL_PROJECT_Dim_Location = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_FINAL_PROJECT_Dim_Location, 0, length);
				strReturn = new String(commonByteArray_FINAL_PROJECT_Dim_Location, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FINAL_PROJECT_Dim_Location) {

				try {

					int length = 0;

					this.Stadt = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_FINAL_PROJECT_Dim_Location) {

				try {

					int length = 0;

					this.Stadt = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Stadt, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Stadt, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.material = readString(dis, ois);

				this.Belegdat = readDate(dis, ois);

				this.kurztext = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.Menge = null;
				} else {
					this.Menge = dis.readFloat();
				}

				length = dis.readByte();
				if (length == -1) {
					this.Nettopreis = null;
				} else {
					this.Nettopreis = dis.readDouble();
				}

				this.Lieferwerk = readInteger(dis, ois);

				this.Lieferant = readString(dis, ois);

				this.Warengrp = readInteger(dis, ois);

				this.Lort = readString(dis, ois);

				this.Artikel_Zustand = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.Nettowert = null;
				} else {
					this.Nettowert = dis.readDouble();
				}

				length = dis.readByte();
				if (length == -1) {
					this.Wert_bb = null;
				} else {
					this.Wert_bb = dis.readDouble();
				}

				length = dis.readByte();
				if (length == -1) {
					this.Gesamtvbrwert = null;
				} else {
					this.Gesamtvbrwert = dis.readDouble();
				}

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
			try {
				int length = 0;

				this.material = readString(dis, objectIn);

				this.Belegdat = readDate(dis, objectIn);

				this.kurztext = readString(dis, objectIn);

				length = objectIn.readByte();
				if (length == -1) {
					this.Menge = null;
				} else {
					this.Menge = objectIn.readFloat();
				}

				length = objectIn.readByte();
				if (length == -1) {
					this.Nettopreis = null;
				} else {
					this.Nettopreis = objectIn.readDouble();
				}

				this.Lieferwerk = readInteger(dis, objectIn);

				this.Lieferant = readString(dis, objectIn);

				this.Warengrp = readInteger(dis, objectIn);

				this.Lort = readString(dis, objectIn);

				this.Artikel_Zustand = readString(dis, objectIn);

				length = objectIn.readByte();
				if (length == -1) {
					this.Nettowert = null;
				} else {
					this.Nettowert = objectIn.readDouble();
				}

				length = objectIn.readByte();
				if (length == -1) {
					this.Wert_bb = null;
				} else {
					this.Wert_bb = objectIn.readDouble();
				}

				length = objectIn.readByte();
				if (length == -1) {
					this.Gesamtvbrwert = null;
				} else {
					this.Gesamtvbrwert = objectIn.readDouble();
				}

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.material, dos, oos);

				writeDate(this.Belegdat, dos, oos);

				writeString(this.kurztext, dos, oos);

				if (this.Menge == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Menge);
				}

				if (this.Nettopreis == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Nettopreis);
				}

				writeInteger(this.Lieferwerk, dos, oos);

				writeString(this.Lieferant, dos, oos);

				writeInteger(this.Warengrp, dos, oos);

				writeString(this.Lort, dos, oos);

				writeString(this.Artikel_Zustand, dos, oos);

				if (this.Nettowert == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Nettowert);
				}

				if (this.Wert_bb == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Wert_bb);
				}

				if (this.Gesamtvbrwert == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Gesamtvbrwert);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut) {
			try {

				writeString(this.material, dos, objectOut);

				writeDate(this.Belegdat, dos, objectOut);

				writeString(this.kurztext, dos, objectOut);

				if (this.Menge == null) {
					objectOut.writeByte(-1);
				} else {
					objectOut.writeByte(0);
					objectOut.writeFloat(this.Menge);
				}

				if (this.Nettopreis == null) {
					objectOut.writeByte(-1);
				} else {
					objectOut.writeByte(0);
					objectOut.writeDouble(this.Nettopreis);
				}

				writeInteger(this.Lieferwerk, dos, objectOut);

				writeString(this.Lieferant, dos, objectOut);

				writeInteger(this.Warengrp, dos, objectOut);

				writeString(this.Lort, dos, objectOut);

				writeString(this.Artikel_Zustand, dos, objectOut);

				if (this.Nettowert == null) {
					objectOut.writeByte(-1);
				} else {
					objectOut.writeByte(0);
					objectOut.writeDouble(this.Nettowert);
				}

				if (this.Wert_bb == null) {
					objectOut.writeByte(-1);
				} else {
					objectOut.writeByte(0);
					objectOut.writeDouble(this.Wert_bb);
				}

				if (this.Gesamtvbrwert == null) {
					objectOut.writeByte(-1);
				} else {
					objectOut.writeByte(0);
					objectOut.writeDouble(this.Gesamtvbrwert);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}

		public boolean supportMarshaller() {
			return true;
		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("material=" + material);
			sb.append(",Belegdat=" + String.valueOf(Belegdat));
			sb.append(",kurztext=" + kurztext);
			sb.append(",Menge=" + String.valueOf(Menge));
			sb.append(",Nettopreis=" + String.valueOf(Nettopreis));
			sb.append(",Lieferwerk=" + String.valueOf(Lieferwerk));
			sb.append(",Lieferant=" + Lieferant);
			sb.append(",Stadt=" + Stadt);
			sb.append(",Warengrp=" + String.valueOf(Warengrp));
			sb.append(",Lort=" + Lort);
			sb.append(",Artikel_Zustand=" + Artikel_Zustand);
			sb.append(",Nettowert=" + String.valueOf(Nettowert));
			sb.append(",Wert_bb=" + String.valueOf(Wert_bb));
			sb.append(",Gesamtvbrwert=" + String.valueOf(Gesamtvbrwert));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(ProductionStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Stadt, other.Stadt);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				ProductionStruct Production = new ProductionStruct();

				/**
				 * [tAdvancedHash_Production begin ] start
				 */

				ok_Hash.put("tAdvancedHash_Production", false);
				start_Hash.put("tAdvancedHash_Production", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_Production";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "Production");
				}

				int tos_count_tAdvancedHash_Production = 0;

				// connection name:Production
				// source node:tDBInput_2 - inputs:(after_tDBInput_1)
				// outputs:(Production,Production) | target node:tAdvancedHash_Production -
				// inputs:(Production) outputs:()
				// linked node: tMap_1 - inputs:(Fournisseur,Production) outputs:(Dim_Location)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_Production = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ProductionStruct> tHash_Lookup_Production = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<ProductionStruct>getLookup(matchingModeEnum_Production);

				globalMap.put("tHash_Lookup_Production", tHash_Lookup_Production);

				/**
				 * [tAdvancedHash_Production begin ] stop
				 */

				/**
				 * [tDBInput_2 begin ] start
				 */

				ok_Hash.put("tDBInput_2", false);
				start_Hash.put("tDBInput_2", System.currentTimeMillis());

				currentComponent = "tDBInput_2";

				int tos_count_tDBInput_2 = 0;

				int nb_line_tDBInput_2 = 0;
				java.sql.Connection conn_tDBInput_2 = null;
				String driverClass_tDBInput_2 = "org.postgresql.Driver";
				java.lang.Class jdbcclazz_tDBInput_2 = java.lang.Class.forName(driverClass_tDBInput_2);
				String dbUser_tDBInput_2 = "postgres";

				final String decryptedPassword_tDBInput_2 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:akLOTlaTE3gTTL2tln72VaCrvP3crpKmozqdztfaFXE=");

				String dbPwd_tDBInput_2 = decryptedPassword_tDBInput_2;

				String url_tDBInput_2 = "jdbc:postgresql://" + "localhost" + ":" + "5432" + "/" + "DBsource";

				conn_tDBInput_2 = java.sql.DriverManager.getConnection(url_tDBInput_2, dbUser_tDBInput_2,
						dbPwd_tDBInput_2);

				conn_tDBInput_2.setAutoCommit(false);

				java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

				String dbquery_tDBInput_2 = "SELECT \n  \"public\".\"SA_Production\".\"material\", \n  \"public\".\"SA_Production\".\"Belegdat\", \n  \"public\".\"SA_P"
						+ "roduction\".\"kurztext\", \n  \"public\".\"SA_Production\".\"Menge\", \n  \"public\".\"SA_Production\".\"Nettopreis\", \n  "
						+ "\"public\".\"SA_Production\".\"Lieferwerk\", \n  \"public\".\"SA_Production\".\"Lieferant\", \n  \"public\".\"SA_Productio"
						+ "n\".\"Stadt\", \n  \"public\".\"SA_Production\".\"Warengrp\", \n  \"public\".\"SA_Production\".\"Lort\", \n  \"public\".\"S"
						+ "A_Production\".\"Artikel_Zustand\", \n  \"public\".\"SA_Production\".\"Nettowert\", \n  \"public\".\"SA_Production\".\"Wer"
						+ "t_bb\", \n  \"public\".\"SA_Production\".\"Gesamtvbrwert\"\nFROM \"public\".\"SA_Production\"";

				globalMap.put("tDBInput_2_QUERY", dbquery_tDBInput_2);
				java.sql.ResultSet rs_tDBInput_2 = null;

				try {
					rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
					java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
					int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

					String tmpContent_tDBInput_2 = null;

					while (rs_tDBInput_2.next()) {
						nb_line_tDBInput_2++;

						if (colQtyInRs_tDBInput_2 < 1) {
							Production.material = null;
						} else {

							Production.material = routines.system.JDBCUtil.getString(rs_tDBInput_2, 1, false);
						}
						if (colQtyInRs_tDBInput_2 < 2) {
							Production.Belegdat = null;
						} else {

							Production.Belegdat = routines.system.JDBCUtil.getDate(rs_tDBInput_2, 2);
						}
						if (colQtyInRs_tDBInput_2 < 3) {
							Production.kurztext = null;
						} else {

							Production.kurztext = routines.system.JDBCUtil.getString(rs_tDBInput_2, 3, false);
						}
						if (colQtyInRs_tDBInput_2 < 4) {
							Production.Menge = null;
						} else {

							Production.Menge = rs_tDBInput_2.getFloat(4);
							if (rs_tDBInput_2.wasNull()) {
								Production.Menge = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 5) {
							Production.Nettopreis = null;
						} else {

							Production.Nettopreis = rs_tDBInput_2.getDouble(5);
							if (rs_tDBInput_2.wasNull()) {
								Production.Nettopreis = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 6) {
							Production.Lieferwerk = null;
						} else {

							Production.Lieferwerk = rs_tDBInput_2.getInt(6);
							if (rs_tDBInput_2.wasNull()) {
								Production.Lieferwerk = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 7) {
							Production.Lieferant = null;
						} else {

							Production.Lieferant = routines.system.JDBCUtil.getString(rs_tDBInput_2, 7, false);
						}
						if (colQtyInRs_tDBInput_2 < 8) {
							Production.Stadt = null;
						} else {

							Production.Stadt = routines.system.JDBCUtil.getString(rs_tDBInput_2, 8, false);
						}
						if (colQtyInRs_tDBInput_2 < 9) {
							Production.Warengrp = null;
						} else {

							Production.Warengrp = rs_tDBInput_2.getInt(9);
							if (rs_tDBInput_2.wasNull()) {
								Production.Warengrp = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 10) {
							Production.Lort = null;
						} else {

							Production.Lort = routines.system.JDBCUtil.getString(rs_tDBInput_2, 10, false);
						}
						if (colQtyInRs_tDBInput_2 < 11) {
							Production.Artikel_Zustand = null;
						} else {

							Production.Artikel_Zustand = routines.system.JDBCUtil.getString(rs_tDBInput_2, 11, false);
						}
						if (colQtyInRs_tDBInput_2 < 12) {
							Production.Nettowert = null;
						} else {

							Production.Nettowert = rs_tDBInput_2.getDouble(12);
							if (rs_tDBInput_2.wasNull()) {
								Production.Nettowert = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 13) {
							Production.Wert_bb = null;
						} else {

							Production.Wert_bb = rs_tDBInput_2.getDouble(13);
							if (rs_tDBInput_2.wasNull()) {
								Production.Wert_bb = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 14) {
							Production.Gesamtvbrwert = null;
						} else {

							Production.Gesamtvbrwert = rs_tDBInput_2.getDouble(14);
							if (rs_tDBInput_2.wasNull()) {
								Production.Gesamtvbrwert = null;
							}
						}

						/**
						 * [tDBInput_2 begin ] stop
						 */

						/**
						 * [tDBInput_2 main ] start
						 */

						currentComponent = "tDBInput_2";

						tos_count_tDBInput_2++;

						/**
						 * [tDBInput_2 main ] stop
						 */

						/**
						 * [tDBInput_2 process_data_begin ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_Production main ] start
						 */

						currentComponent = "tAdvancedHash_Production";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "Production"

							);
						}

						ProductionStruct Production_HashRow = new ProductionStruct();

						Production_HashRow.material = Production.material;

						Production_HashRow.Belegdat = Production.Belegdat;

						Production_HashRow.kurztext = Production.kurztext;

						Production_HashRow.Menge = Production.Menge;

						Production_HashRow.Nettopreis = Production.Nettopreis;

						Production_HashRow.Lieferwerk = Production.Lieferwerk;

						Production_HashRow.Lieferant = Production.Lieferant;

						Production_HashRow.Stadt = Production.Stadt;

						Production_HashRow.Warengrp = Production.Warengrp;

						Production_HashRow.Lort = Production.Lort;

						Production_HashRow.Artikel_Zustand = Production.Artikel_Zustand;

						Production_HashRow.Nettowert = Production.Nettowert;

						Production_HashRow.Wert_bb = Production.Wert_bb;

						Production_HashRow.Gesamtvbrwert = Production.Gesamtvbrwert;

						tHash_Lookup_Production.put(Production_HashRow);

						tos_count_tAdvancedHash_Production++;

						/**
						 * [tAdvancedHash_Production main ] stop
						 */

						/**
						 * [tAdvancedHash_Production process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_Production";

						/**
						 * [tAdvancedHash_Production process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_Production process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_Production";

						/**
						 * [tAdvancedHash_Production process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 process_data_end ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 end ] start
						 */

						currentComponent = "tDBInput_2";

					}
				} finally {
					if (rs_tDBInput_2 != null) {
						rs_tDBInput_2.close();
					}
					if (stmt_tDBInput_2 != null) {
						stmt_tDBInput_2.close();
					}
					if (conn_tDBInput_2 != null && !conn_tDBInput_2.isClosed()) {

						conn_tDBInput_2.commit();

						conn_tDBInput_2.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}
				globalMap.put("tDBInput_2_NB_LINE", nb_line_tDBInput_2);

				ok_Hash.put("tDBInput_2", true);
				end_Hash.put("tDBInput_2", System.currentTimeMillis());

				/**
				 * [tDBInput_2 end ] stop
				 */

				/**
				 * [tAdvancedHash_Production end ] start
				 */

				currentComponent = "tAdvancedHash_Production";

				tHash_Lookup_Production.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "Production");
				}

				ok_Hash.put("tAdvancedHash_Production", true);
				end_Hash.put("tAdvancedHash_Production", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_Production end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_2 finally ] start
				 */

				currentComponent = "tDBInput_2";

				/**
				 * [tDBInput_2 finally ] stop
				 */

				/**
				 * [tAdvancedHash_Production finally ] start
				 */

				currentComponent = "tAdvancedHash_Production";

				/**
				 * [tAdvancedHash_Production finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	protected PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final Dim_Location Dim_LocationClass = new Dim_Location();

		int exitCode = Dim_LocationClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}
		boolean inOSGi = routines.system.BundleUtils.inOSGi();

		if (inOSGi) {
			java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

			if (jobProperties != null && jobProperties.get("context") != null) {
				contextStr = (String) jobProperties.get("context");
			}
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = Dim_Location.class.getClassLoader()
					.getResourceAsStream("final_project/dim_location_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = Dim_Location.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				try {
					// defaultProps is in order to keep the original context value
					if (context != null && context.isEmpty()) {
						defaultProps.load(inContext);
						context = new ContextProperties(defaultProps);
					}
				} finally {
					inContext.close();
				}
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tDBInput_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_1) {
			globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

			e_tDBInput_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : Dim_Location");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;

		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 135307 characters generated by Talend Open Studio for Data Integration on the
 * May 13, 2024 at 10:47:33 AM GMT+01:00
 ************************************************************************************************/